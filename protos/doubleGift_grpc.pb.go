// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: doubleGift.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetInfoServiceClient is the client API for GetInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetInfoServiceClient interface {
	GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoRes, error)
}

type getInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetInfoServiceClient(cc grpc.ClientConnInterface) GetInfoServiceClient {
	return &getInfoServiceClient{cc}
}

func (c *getInfoServiceClient) GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoRes, error) {
	out := new(GetInfoRes)
	err := c.cc.Invoke(ctx, "/message.GetInfoService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetInfoServiceServer is the server API for GetInfoService service.
// All implementations must embed UnimplementedGetInfoServiceServer
// for forward compatibility
type GetInfoServiceServer interface {
	GetInfo(context.Context, *GetInfoReq) (*GetInfoRes, error)
	mustEmbedUnimplementedGetInfoServiceServer()
}

// UnimplementedGetInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetInfoServiceServer struct {
}

func (UnimplementedGetInfoServiceServer) GetInfo(context.Context, *GetInfoReq) (*GetInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedGetInfoServiceServer) mustEmbedUnimplementedGetInfoServiceServer() {}

// UnsafeGetInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetInfoServiceServer will
// result in compilation errors.
type UnsafeGetInfoServiceServer interface {
	mustEmbedUnimplementedGetInfoServiceServer()
}

func RegisterGetInfoServiceServer(s grpc.ServiceRegistrar, srv GetInfoServiceServer) {
	s.RegisterService(&GetInfoService_ServiceDesc, srv)
}

func _GetInfoService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetInfoServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.GetInfoService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetInfoServiceServer).GetInfo(ctx, req.(*GetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GetInfoService_ServiceDesc is the grpc.ServiceDesc for GetInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.GetInfoService",
	HandlerType: (*GetInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _GetInfoService_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doubleGift.proto",
}
